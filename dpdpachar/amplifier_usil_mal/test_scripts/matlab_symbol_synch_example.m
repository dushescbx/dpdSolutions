qpskMod  = comm.QPSKModulator;
rctFilt = comm.RaisedCosineTransmitFilter( ...
    'OutputSamplesPerSymbol', 2);
varDelay = dsp.VariableFractionalDelay;
awgnChan = comm.AWGNChannel( ...
    'NoiseMethod',  'Signal to noise ratio (SNR)', ...
    'SNR',          15, ...
    'SignalPower',  0.5, ...
    'RandomStream', 'mt19937ar with seed');
rcrFilt = comm.RaisedCosineReceiveFilter( ...
    'InputSamplesPerSymbol',  2, ...
    'DecimationFactor',       1);
constDiag1 = comm.ConstellationDiagram( ...
    'SamplesPerSymbol', 2, ...
    'XLimits',         [-2 2], ...
    'YLimits',         [-2 2], ...
    'Title',           'Before Symbol Synchronizer', ...
    'Position',        [400 400 400 400]);
symsync = comm.SymbolSynchronizer( ...
    'SamplesPerSymbol', 2, ...
    'DampingFactor', sqrt(2)/2, ...
    'NormalizedLoopBandwidth', 0.01);
constDiag2 = comm.ConstellationDiagram( ...
    'XLimits',  [-2 2], ...
    'YLimits',  [-2 2], ...
    'Title',    'After Symbol Synchronizer', ...
    'Position', [1000 400 400 400]);

rng(100);

M = [4 8 20];
modOrder = sum(M);
radii = [0.3 0.7 1.2];
refAPSK = apskmod(0:2^length(M)-1,M,radii);
x = randi([0 modOrder-1],100,1);

for i = 1:100    
    txSym = apskmod(x,M,radii);
   
    %       data      = randi([0 3], 100, 1);           % Random data
    %       txSym     = qpskMod(data);                  % QPSK modulation
    txSample  = rctFilt(txSym);                 % Transmit filter
    chanDelay = varDelay(txSample, 0.05*(i-1)); % Variable delay
    chanOut   = awgnChan(chanDelay);            % AWGN channel
    rxSample  = rcrFilt(chanOut);               % Receive filter
    % Constellation diagram view before symbol synchronizer
    constDiag1(rxSample);
    rxSym     = symsync(rxSample);              % Symbol synchronizer
    % Constellation diagram view after symbol synchronizer. Skip some
    % frames of irregular length as the Constellation Diagram object
    % does not allow input frame length change.
    if length(rxSym) == 100
        constDiag2(rxSym);
    end
end